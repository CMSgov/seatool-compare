service: ${self:custom.project}-compare

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-stack-termination-protection
  - "@stratiformdigital/serverless-s3-security-helper"
  - serverless-bundle
  - "@stratiformdigital/serverless-idempotency-helper"
  - "@stratiformdigital/serverless-online"
  - "@stratiformdigital/serverless-iam-helper"
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs16.x
  region: ${env:REGION_A}
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  iam:
    role:
      path: ${ssm:/configuration/${sls:stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/${sls:stage}/iam/permissionsBoundaryPolicyArn, ssm:/configuration/default/iam/permissionsBoundaryPolicyArn, ""}
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
          Resource:
            - ${param:mmdlTableArn}
            - ${param:seatoolTableArn}
            - ${param:statusTableArn}
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource:
            - ${param:statusTableArn}
        - Effect: Allow
          Action:
            - states:StartExecution
          Resource:
            - !Ref MMDLAlertingStateMachine
            - !Sub "arn:aws:states:${self:provider.region}:${AWS::AccountId}:execution:${MMDLAlertingStateMachine.Name}:*"
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource:
            - !Sub "arn:aws:ses:${self:provider.region}:${AWS::AccountId}:identity/*"
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - !Sub "arn:aws:secretsmanager:${self:provider.region}:${AWS::AccountId}:secret:${self:custom.project}/${sls:stage}/alerts*"
        - Effect: Allow
          Action:
            - secretsmanager:ListSecrets
          Resource: "*"

params:
  master:
    initialWaitSec: 172800 # 2 days
    signedSinceChoiceSec: 345600 # 4 days
    recordAgeChoiceSec: 21686400 # 251 days
  val:
    initialWaitSec: 172800
    signedSinceChoiceSec: 345600
    recordAgeChoiceSec: 21686400
  production:
    initialWaitSec: 172800
    signedSinceChoiceSec: 345600
    recordAgeChoiceSec: 21686400
  default:
    initialWaitSec: 2
    signedSinceChoiceSec: 3
    recordAgeChoiceSec: 4

custom:
  project: ${env:PROJECT}
  serverlessTerminationProtection:
    stages: # Apply CloudFormation termination protection for these stages
      - master
      - val
      - production
  secretId: ${self:custom.project}/${sls:stage}/alerts

functions:
  workflowStarter:
    handler: handlers/workflowStarter.handler
    events:
      - stream:
          arn: ${param:mmdlTableStreamArn}
          startingPosition: LATEST
          maximumRetryAttempts: 0
    environment:
      stateMachineArn: !Ref MMDLAlertingStateMachine
      region: ${self:provider.region}
    maximumRetryAttempts: 0
  compare:
    handler: handlers/compare.handler
  seatoolRecordExist:
    handler: handlers/seatoolRecordExist.handler
    environment:
      region: ${self:provider.region}
      seatoolTableName: ${param:seatoolTableName}
  initStatus:
    handler: handlers/initStatus.handler
    environment:
      region: ${self:provider.region}
      statusTableName: ${param:statusTableName}
      mmdlTableName: ${param:mmdlTableName}
  updateStatus:
    handler: handlers/updateStatus.handler
    environment:
      region: ${self:provider.region}
      statusTableName: ${param:statusTableName}
  sendDoesNotExistAlert:
    handler: handlers/sendDoesNotExistAlert.handler
    environment:
      region: ${self:provider.region}
      project: ${self:custom.project}
      stage: ${sls:stage}
  sendNoMatchAlert:
    handler: handlers/sendNoMatchAlert.handler
    environment:
      region: ${self:provider.region}
      project: ${self:custom.project}
      stage: ${sls:stage}
  daysSinceMmdlSubmission:
    handler: handlers/daysSinceMmdlSubmission.handler
    environment:
      region: ${self:provider.region}
      project: ${self:custom.project}
      stage: ${sls:stage}
resources:
  Resources:
    StateMachineLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/vendedlogs/states/${self:service}-${sls:stage}-alert

stepFunctions:
  stateMachines:
    compareAlertFunc:
      name: ${self:service}-${sls:stage}-compare-alerting
      id: MMDLAlertingStateMachine
      loggingConfig:
        level: ALL
        includeExecutionData: true
        destinations:
          - !GetAtt StateMachineLogGroup.Arn
      definition:
        Comment: "A State Machine to orchestrate a CMS alerting workflow for MMDL."
        StartAt: InitializeTask
        States:
          InitializeTask:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-initStatus"
            Parameters:
              Payload.$: $
              Context.$: $$
            Next: InitialWait
          InitialWait:
            Type: Wait
            Seconds: ${param:initialWaitSec}
            Next: DaysSinceMmdlSubmissionTask
          DaysSinceMmdlSubmissionTask:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-daysSinceMmdlSubmission"
            Parameters:
              Payload.$: $
            Next: DoesSeatoolRecordExistTask
          DoesSeatoolRecordExistTask:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-seatoolRecordExist"
            Parameters:
              Payload.$: $
            Next: HandleSeatoolRecordExistChoice
          HandleSeatoolRecordExistChoice:
            Type: Choice
            Choices:
              - Variable: $.seatoolExist
                BooleanEquals: true
                Next: CompareTask
              - Variable: $.seatoolExist
                BooleanEquals: false
                Next: SignedSinceChoice
            Default: SignedSinceChoice
          SignedSinceChoice:
            Type: Choice
            Choices:
              - And:
                  - Variable: $.secSinceMmdlSigned
                    IsPresent: true
                  - Variable: $.secSinceMmdlSigned
                    NumericGreaterThanEquals: ${param:signedSinceChoiceSec}
                  - Variable: $.mmdlSigned
                    BooleanEquals: true
                Next: SendNotExistTask
            Default: UpdateStatusTask
          SendNotExistTask:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-sendDoesNotExistAlert"
            Parameters:
              Payload.$: $
            Next: UpdateStatusTask
          RecordAgeChoice:
            Type: Choice
            Choices:
              - And:
                  - Variable: $.mmdlSigned
                    IsPresent: true
                  - Variable: $.secSinceMmdlSigned
                    IsPresent: true
                  - Variable: $.mmdlSigned
                    BooleanEquals: true
                  - Variable: $.secSinceMmdlSigned
                    NumericGreaterThanEquals: ${param:recordAgeChoiceSec}
                Next: LastLoopAMatchChoice
              - Variable: $.mmdlSigned
                IsPresent: false
                Next: FailState
            Default: InitialWait
          LastLoopAMatchChoice:
            Type: Choice
            Choices:
              - And:
                  - Variable: $.match
                    IsPresent: true
                  - Variable: $.match
                    BooleanEquals: true
                Next: SuccessState
            Default: FailState
          CompareTask:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-compare"
            Parameters:
              Payload.$: $
            Next: RecordsMatchChoice
          RecordsMatchChoice:
            Type: Choice
            Choices:
              - Variable: $.match
                BooleanEquals: true
                Next: UpdateStatusTask
              - Variable: $.match
                BooleanEquals: false
                Next: SendNotMatchTask
            Default: SendNotMatchTask
          SendNotMatchTask:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-sendNoMatchAlert"
            Parameters:
              Payload.$: $
            Next: UpdateStatusTask
          UpdateStatusTask:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-updateStatus"
            Parameters:
              Payload.$: $
            Next: RecordAgeChoice
          SuccessState:
            Type: Succeed
          FailState:
            Type: Fail
